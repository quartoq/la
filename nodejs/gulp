модулем nodejs делаем каталог с каталогами src
projectName_project/projectName
там содержатся каталоги src, dist и возможно другие, там же есть или появится каталог node_modules
в каталоге projectName создаём файл package.json, предназначенном для хранения основной информации о модуле и его зависимостях
создать package.json можно находясь в командной строке в каталоге projectName командой
npm init
можно запустить её с одним из ключей -f, --force, -y или --yes, тогда файл package.json создатся с настройками по умолчанию, потом можно их подправить командами или вручную

в package.json в разделе devDependencies по замуслу хранятся зависимости проекта, которые использует разработчик проекта, они не нужны в production-версии (например, gulp, его плагины и т.п.), в разделе dependencies хранятся зависимости проекта, без которых проект нормально работать не будет (например, jquery и т.п.)

для развёртывания проекта достаточно зайти в каталог с package.json и выполнить команду
npm install
все зависимости подгрузятся в каталог node_modules

установить какую-то зависимость в проект с указанием её в файле package.json можно командами
npm install имя_плагина --save-dev - для dev-зависимостей, вместо --save-dev можно указать -O, результат будет тем же, это псевдоним (alias)
npm install имя_плагина --save
Если для пакета сделать npm install, то npm подсосет те пакеты, которые указаны у него в dependencies, если сделать npm install, находясь в каталоге с package.json, то установятся и те, и другие.


для gulp полезны следующие плагины, они приведены в составе package.json
{
  "name": "projectName",
  "version": "0.0.1",
  "devDependencies": {
    "fs": "0.0.1-security",
    "gulp": "^3.9.1",
    "gulp-changed": "3.1.0",
    "gulp-clean": "0.3.2",
    "gulp-concat": "2.6.1",
    "gulp-cssmin": "0.2.0",
    "gulp-filesize": "0.0.6",
    "gulp-inject-string": "1.1.0",
    "gulp-less": "3.3.0",
    "gulp-plumber": "1.1.0",
    "gulp-rename": "1.2.2",
    "gulp-rimraf": "0.2.1",
    "gulp-sass": "3.1.0",
    "gulp-sequence": "0.4.6",
    "gulp-sourcemaps": "^2.6.0",
    "gulp-uglify": "3.0.0",
    "gulp-util": "3.0.8",
    "gulp-watch": "4.3.11",
    "pump": "1.0.2"
  },
  "main": "gulpfile.js",
  "dependencies": {
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": ""
}


установка gulp
npm install gulp-cli -g
npm install gulp -D



gulpfile.js содержит команды, которые требуется выполнить
в самом верху обычно назначаются переменные, через которые идёт работа с gulp и его плагинами и в первую очередь для работы с самим gulp
var gulp = require('gulp');
далее подобным образом для работы плагины
у gulp есть 4 основных метода, для работы
gulp.src | gulp.dest | gulp.task | gulp.watch

часто
gulp.src(строка или массив строк) - определяет исходные файлы, с которыми нужно произвести работу
gulp.dest(строка) - определяет каталог, в который сохранится результат работы
gulp.task - определяет задачи, которые нужно выполнить
gulp.watch - используется для автоматического выполнения задач при изменении исходных файлов

для запуска задач обычно  в командной строке вызывают команду gulp в каталоге с файлом gulpfile.js
либо 
gulp список задач через запятую
в первом случае выполнится так называемая задача по умолчанию, она имеет имя default, поэтому часто поступают так

var gulp = require('gulp');
gulp.task('one', function(cb) {
  //do something
});
gulp.task('two', function(cb) {
  //do something
});
//задача один выполнится до выполнения задачи one, код задачи two указывается в коде функции, переданной третьим параметром
gulp.task('two', ['one'], function() {
    // task 'one' is done now
});
//задачи one и two выполнятся перед выполнением задачи default (так как третьим параметром ничего не передано, код задачи default как бы пустой)
gulp.task('default', ['one', 'two']);




все задачи можно делать через pipe, либо воспользоваться плагином pump, что вроде бы аккуратнее
например, две задачи sass() и cssmin() через pipe выглядят так
sass()
.pipe(cssmin())
а через pump так
 pump([
  sass(),
  cssmin()
]);


копирование файлов можно осуществить без плагинов, просто через src и dest
var gulp = require('gulp');
var pump = require('pump');
gulp.task("copy", function () {
    pump([
        gulp.src("src/**/*.css"),
        gulp.dest("dist")
    ]);
//тоже самое через pipe:
//gulp.src("src/**/*.css").pipe(gulp.dest("dist"));
});
gulp.task('default', ["copy"]);
скопирует все css-файлы из каталога src и поместит их в соответствующие каталоги в каталоге dist


очистка каталога (обычно очищают полностью каталог dist перед новой сборкой )
var gulp = require('gulp');
var clean = require('gulp-clean');
gulp.task("default", function () {
    return gulp.src("dist/*", {read: false})
        .pipe(clean());
});
очистит каталог dist
read: false используется для ускорения, так как src перестаёт читать файлы (их всё равно удалять)


обычно






для облегчения будущих модификаций обычно создают объект, в котором задают пути и прежде всего путь к корневому каталогу проекта
var paths = {
    webroot: "./src/public_html/"
};
и далее в коде вместо конкретных путей используют именно это свойство, например,
 gulp.src(paths.webroot + "/**/*.css"),
 если путь к корневому каталогу проекта изменится, а структура каталогов проекта - нет, то достаточно будет сделать изхменение всего в одном месте






